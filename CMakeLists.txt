PROJECT(Cutter)
CMAKE_MINIMUM_REQUIRED(VERSION 3.12.0)
INCLUDE(CheckCXXCompilerFlag)



# variabili di configurazione progetto
SET(CUTTER_VERSION 0.0.1)
SET(PROJECT_UI_NAME "Cutter")
SET(ORGANIZATION "DV")
SET(LOG_PATH ${ORGANIZATION}/${PROJECT_NAME}/logs)
STRING(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOW)
SET(PROGRAM_NAMESPACE ${PROJECT_NAME_LOW})
#SET(STYLESHEET_PATH "${PROJECT_SOURCE_DIR}/gui/resources/qss") # solo per sviluppo



IF (CMAKE_HOST_WIN32)
    SET(SPOOL_PATH_DFLT "$ENV{USERPROFILE}")
    SET(MARKING_CONFIGURATION_PATH_DFLT "$ENV{USERPROFILE}")
ELSEIF(CMAKE_HOST_UNIX)
    SET(SPOOL_PATH_DFLT "$ENV{HOME}")
    SET(MARKING_CONFIGURATION_PATH_DFLT "$ENV{HOME}")
ENDIF()

FILE(TO_CMAKE_PATH ${SPOOL_PATH_DFLT} SPOOL_PATH_DFLT)
STRING(REPLACE "/" "//" SPOOL_PATH_DFLT ${SPOOL_PATH_DFLT}) # aggiungo double quote (consigliato da documentazione cmake)
MESSAGE("SPOOL_PATH: ${SPOOL_PATH_DFLT}")

FILE(TO_CMAKE_PATH ${MARKING_CONFIGURATION_PATH_DFLT} MARKING_CONFIGURATION_PATH_DFLT)
STRING(REPLACE "/" "//" MARKING_CONFIGURATION_PATH_DFLT ${MARKING_CONFIGURATION_PATH_DFLT}) # aggiungo double quote (consigliato da documentazione cmake)
MESSAGE("MARKING_CONFIGURATION_PATH_DFLT: ${MARKING_CONFIGURATION_PATH_DFLT}")



# controllo se sono in debug o release
IF (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    SET(DEBUG_MODE TRUE)
    MESSAGE("Compilazione: DEBUG MODE")
ELSE()
    SET(DEBUG_MODE FALSE)
    MESSAGE("Compilazione: RELEASE MODE")
ENDIF()

STRING(TOLOWER ${CMAKE_BUILD_TYPE} BUILT_TYPE_STR_LOWER_CASE)
MESSAGE("BUILT_TYPE_STR_LOWER_CASE: ${BUILT_TYPE_STR_LOWER_CASE}")



# variabili di impostazione ambiente
OPTION(FLAG_LOG_VERBOSE "Abilita log verbose")
MESSAGE("CMAKE_SIZEOF_VOID_P: ${CMAKE_SIZEOF_VOID_P}")
IF (CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(ARCHITECTURE "x64")
ELSEIF(CMAKE_SIZEOF_VOID_P EQUAL 4)
    SET(ARCHITECTURE "x86")
ENDIF()
MESSAGE("ARCHITECTURE: ${ARCHITECTURE}")

IF(FLAG_LOG_VERBOSE)
    ADD_DEFINITIONS(-DLOG_VERBOSE)
ELSE()
    REMOVE_DEFINITIONS(-DLOG_VERBOSE)
ENDIF()

CHECK_CXX_COMPILER_FLAG("-std=c++14" COMPILER_SUPPORTS_CXX14)
IF(COMPILER_SUPPORTS_CXX14)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
    SET(CMAKE_CXX_STANDARD 14)
ENDIF()

IF (NOT MSVC)
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-reorder -Wno-long-long -pedantic -Wno-comment -fPIC")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-missing-noreturn -Wno-reorder -Wno-long-long -pedantic -Wno-comment")
ENDIF(NOT MSVC)
SET(CMAKE_VERBOSE_MAKEFILE TRUE)
SET(CMAKE_INCLUDE_CURRENT_DIR ON)



# configurazione ambiente QT
FIND_PACKAGE(Qt5 COMPONENTS
    Core
    Gui
    Qml
    Quick
    QuickControls2
    QuickTemplates2
    Network
    LinguistTools
    REQUIRED)

FIND_PACKAGE(Qt5QuickCompiler)

MESSAGE("Qt5Core_VERSION: ${Qt5Core_VERSION}")
MESSAGE("Qt5Core_LIBRARIES: ${Qt5Core_LIBRARIES}")
MESSAGE("Qt5Core_INCLUDE_DIRS: ${Qt5Core_INCLUDE_DIRS}")
MESSAGE("Qt5Core_DEFINITIONS: ${Qt5Core_DEFINITIONS}")
MESSAGE("Qt5Core_COMPILE_DEFINITIONS: ${Qt5Core_COMPILE_DEFINITIONS}")
MESSAGE("Qt5Core_FOUND: ${Qt5Core_FOUND}")
MESSAGE("Qt5Core_EXECUTABLE_COMPILE_FLAGS: ${Qt5Core_EXECUTABLE_COMPILE_FLAGS}")

MESSAGE("Qt5Gui_VERSION: ${Qt5Gui_VERSION}")
MESSAGE("Qt5Gui_LIBRARIES: ${Qt5Gui_LIBRARIES}")
MESSAGE("Qt5Gui_INCLUDE_DIRS: ${Qt5Gui_INCLUDE_DIRS}")
MESSAGE("Qt5Gui_DEFINITIONS: ${Qt5Gui_DEFINITIONS}")
MESSAGE("Qt5Gui_COMPILE_DEFINITIONS: ${Qt5Gui_COMPILE_DEFINITIONS}")
MESSAGE("Qt5Gui_FOUND: ${Qt5Gui_FOUND}")
MESSAGE("Qt5Gui_EXECUTABLE_COMPILE_FLAGS: ${Qt5Gui_EXECUTABLE_COMPILE_FLAGS}")

MESSAGE("Qt5Qml_VERSION: ${Qt5Qml_VERSION}")
MESSAGE("Qt5Qml_LIBRARIES: ${Qt5Qml_LIBRARIES}")
MESSAGE("Qt5Qml_INCLUDE_DIRS: ${Qt5Qml_INCLUDE_DIRS}")
MESSAGE("Qt5Qml_DEFINITIONS: ${Qt5Qml_DEFINITIONS}")
MESSAGE("Qt5Qml_COMPILE_DEFINITIONS: ${Qt5Qml_COMPILE_DEFINITIONS}")
MESSAGE("Qt5Qml_FOUND: ${Qt5Qml_FOUND}")
MESSAGE("Qt5Qml_EXECUTABLE_COMPILE_FLAGS: ${Qt5Qml_EXECUTABLE_COMPILE_FLAGS}")

MESSAGE("Qt5Quick_VERSION: ${Qt5Quick_VERSION}")
MESSAGE("Qt5Quick_LIBRARIES: ${Qt5Quick_LIBRARIES}")
MESSAGE("Qt5Quick_INCLUDE_DIRS: ${Qt5Quick_INCLUDE_DIRS}")
MESSAGE("Qt5Quick_DEFINITIONS: ${Qt5Quick_DEFINITIONS}")
MESSAGE("Qt5Quick_COMPILE_DEFINITIONS: ${Qt5Quick_COMPILE_DEFINITIONS}")
MESSAGE("Qt5Quick_FOUND: ${Qt5Quick_FOUND}")
MESSAGE("Qt5Quick_EXECUTABLE_COMPILE_FLAGS: ${Qt5Quick_EXECUTABLE_COMPILE_FLAGS}")

MESSAGE("Qt5QuickControls2_VERSION: ${Qt5QuickControls2_VERSION}")
MESSAGE("Qt5QuickControls2_LIBRARIES: ${Qt5QuickControls2_LIBRARIES}")
MESSAGE("Qt5QuickControls2_INCLUDE_DIRS: ${Qt5QuickControls2_INCLUDE_DIRS}")
MESSAGE("Qt5QuickControls2_DEFINITIONS: ${Qt5QuickControls2_DEFINITIONS}")
MESSAGE("Qt5QuickControls2_COMPILE_DEFINITIONS: ${Qt5QuickControls2_COMPILE_DEFINITIONS}")
MESSAGE("Qt5QuickControls2_FOUND: ${Qt5QuickControls2_FOUND}")
MESSAGE("Qt5QuickControls2_EXECUTABLE_COMPILE_FLAGS: ${Qt5QuickControls2_EXECUTABLE_COMPILE_FLAGS}")

MESSAGE("Qt5QuickTemplates2_VERSION: ${Qt5QuickTemplates2_VERSION}")
MESSAGE("Qt5QuickTemplates2_LIBRARIES: ${Qt5QuickTemplates2_LIBRARIES}")
MESSAGE("Qt5QuickTemplates2_INCLUDE_DIRS: ${Qt5QuickTemplates2_INCLUDE_DIRS}")
MESSAGE("Qt5QuickTemplates2_DEFINITIONS: ${Qt5QuickTemplates2_DEFINITIONS}")
MESSAGE("Qt5QuickTemplates2_COMPILE_DEFINITIONS: ${Qt5QuickTemplates2_COMPILE_DEFINITIONS}")
MESSAGE("Qt5QuickTemplates2_FOUND: ${Qt5QuickTemplates2_FOUND}")
MESSAGE("Qt5QuickTemplates2_EXECUTABLE_COMPILE_FLAGS: ${Qt5QuickTemplates2_EXECUTABLE_COMPILE_FLAGS}")

MESSAGE("Qt5Network_VERSION: ${Qt5Network_VERSION}")
MESSAGE("Qt5Network_LIBRARIES: ${Qt5Network_LIBRARIES}")
MESSAGE("Qt5Network_INCLUDE_DIRS: ${Qt5Network_INCLUDE_DIRS}")
MESSAGE("Qt5Network_DEFINITIONS: ${Qt5Network_DEFINITIONS}")
MESSAGE("Qt5Network_COMPILE_DEFINITIONS: ${Qt5Network_COMPILE_DEFINITIONS}")
MESSAGE("Qt5Network_FOUND: ${Qt5Network_FOUND}")
MESSAGE("Qt5Network_EXECUTABLE_COMPILE_FLAGS: ${Qt5Network_EXECUTABLE_COMPILE_FLAGS}")

SET(QT_LIBRARIES
    ${Qt5Core_LIBRARIES}
    ${Qt5Gui_LIBRARIES}
    ${Qt5Qml_LIBRARIES}
    ${Qt5Quick_LIBRARIES}
    ${Qt5QuickControls2_LIBRARIES}
    ${Qt5QuickTemplates2_LIBRARIES}
    ${Qt5Network_LIBRARIES}
    )
MESSAGE("QT_LIBRARIES: ${QT_LIBRARIES}")

SET(QML_IMPORT_PATH ${CMAKE_SOURCE_DIR}/ui/qml ${CMAKE_BINARY_DIR}/imports CACHE STRING "" FORCE)
MESSAGE("QML_IMPORT_PATH: ${QML_IMPORT_PATH}")


SET (THIRD_PARTY_PATH "${PROJECT_SOURCE_DIR}/third-party")
MESSAGE("THIRD_PARTY_PATH: ${THIRD_PARTY_PATH}")

SET(PROGRAM_PATH "$ENV{ProgramFiles}")
SET(PROGRAM_PATH_X86 "$ENV{ProgramFiles\(x86\)}")

MESSAGE("PROGRAM_PATH: ${PROGRAM_PATH}")
MESSAGE("PROGRAM_PATH_X86: ${PROGRAM_PATH_X86}")



# Configurazione Cambridge Technology (CT) SM-XML (old API - SMAPI ci sono solo per ambiente managed .NET cazz..)

#SET(CT_SMAPI_REDISTR_PATH_DFLT "C:\\Program Files\\Cambridge Technology\\ScanMaster API\\Redistributables")
#SET(CT_SMAPI_REDISTR_PATH CACHE STRING "")

#MESSAGE("CT_SMAPI_REDISTR_PATH_DFLT: ${CT_SMAPI_REDISTR_PATH_DFLT}")
#MESSAGE("CT_SMAPI_REDISTR_PATH: ${CT_SMAPI_REDISTR_PATH}")

## DLL
#FIND_FILE(CT_SMAPI_DLL "Cti.SMAPI.Win32.dll"
#    HINTS ${CT_SMAPI_REDISTR_PATH_DFLT}
#    PATHS ${CT_SMAPI_REDISTR_PATH})
#IF (NOT CT_SMAPI_DLL)
#    MESSAGE(SEND_ERROR "Cti.SMAPI.Win32.dll NOT FOUND")
#ENDIF()
#MESSAGE("CT_SMAPI_DLL: ${CT_SMAPI_DLL}")

## C++ HEADERS
#FIND_PATH(CT_SMAPI_INCLUDE_PATH "CtiSMAPIWin32.h"
#    HINTS "${CT_SMAPI_REDISTR_PATH_DFLT}\\Include" "${CT_SMAPI_REDISTR_PATH}\\Include"
#)
#IF (NOT CT_SMAPI_INCLUDE_PATH)
#    MESSAGE(SEND_ERROR "Cambridge Technology headers NOT FOUND")
#ENDIF()
#MESSAGE("CT_SMAPI_INCLUDE_PATH: ${CT_SMAPI_INCLUDE_PATH}")

## LIB
#FIND_LIBRARY(CT_SMAPI_LIB "Cti.SMAPI.Win32.lib"
#    HINTS "${CT_SMAPI_REDISTR_PATH_DFLT}\\Lib"
#    "${CT_SMAPI_REDISTR_PATH}\\Lib"
#    )
#IF (NOT CT_SMAPI_LIB)
#    MESSAGE(SEND_ERROR "Cambridge Technology lib NOT FOUND")
#ENDIF()
#MESSAGE("CT_SMAPI_LIB: ${CT_SMAPI_LIB}")

# Configurazione Cambridge Technology (CT) SM-XML (old API - SMAPI ci sono solo per ambiente managed .NET cazz..)
SET(CT_XMLAPI_PATH_DFLT "C:\\Program Files\\Cambridge Technology\\SMC\\Client\\Redistributables")
SET(CT_XMLAPI_PATH CACHE STRING "")
SET(CT_XMLAPI_LIBS "Cti.Broadcast.Win32Cls;Cti.ECUtils.Win32Cls;Cti.Session.Win32Cls")
SET(CT_XMLAPI_DLL_MANDATORY "Cti.FTPClient.dll;Cti.CommonLib.dll")

# LIB
FIND_PATH(CT_XMLAPI_LIB_PATH "Cti.Broadcast.Win32.lib"
    HINTS "${CT_XMLAPI_PATH_DFLT}\\Lib"
    PATHS "${CT_XMLAPI_LIB_PATH}\\Lib")
IF (NOT CT_XMLAPI_LIB_PATH)
    MESSAGE(SEND_ERROR "Cambridge Technology LIB folder not found")
ENDIF()
MESSAGE("CT_XMLAPI_LIB_PATH: ${CT_XMLAPI_LIB_PATH}")
MESSAGE("CT_XML_LIBS: ${CT_XML_LIB}")

# HEADERS
FIND_PATH(CT_XMLAPI_H_PATH "CTIBroadcastWin32.h"
    HINTS "${CT_XMLAPI_PATH_DFLT}\\Include"
    PATHS "${CT_XMLAPI_LIB_PATH}\\Include")
IF (NOT CT_XMLAPI_H_PATH)
    MESSAGE(SEND_ERROR "Cambridge Technology HEADERS folder not found")
ENDIF()
MESSAGE("CT_XMLAPI_H_PATH: ${CT_XMLAPI_H_PATH}")

# DLL
FIND_PATH(CT_XMLAPI_DLL_PATH "Cti.Broadcast.Win32.dll"
    HINTS "${CT_XMLAPI_PATH_DFLT}\\Bin"
    PATHS "${CT_XMLAPI_LIB_PATH}\\Bin")
IF (NOT CT_XMLAPI_DLL_PATH)
    MESSAGE(SEND_ERROR "Cambridge Technology DLL folder not found")
ENDIF()
MESSAGE("CT_XMLAPI_DLL_PATH: ${CT_XMLAPI_DLL_PATH}")



INCLUDE_DIRECTORIES(
    ${Qt5Core_INCLUDE_DIRS}
    ${Qt5Gui_INCLUDE_DIRS}
    ${Qt5Qml_INCLUDE_DIRS}
    ${Qt5Quick_INCLUDE_DIRS}
    ${Qt5QuickControls2_INCLUDE_DIRS}
    ${Qt5QuickTemplates2d_INCLUDE_DIRS}
    ${Qt5Network_INCLUDE_DIRS}
    ${CT_XMLAPI_H_PATH})

LINK_DIRECTORIES(
    ${CT_XMLAPI_LIB_PATH}
    )

GET_PROPERTY(PRINT_LINK_DIRECTORIES DIRECTORY PROPERTY LINK_DIRECTORIES)
MESSAGE("LINK_DIRECTORY: ${PRINT_LINK_DIRECTORIES}")

SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTOUIC ON)
SET(CMAKE_AUTORCC ON)

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/configure.h.in ${PROJECT_BINARY_DIR}/configure.h)
INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR})

SET(PROJECT_SOURCES "" CACHE INTERNAL "sources of project")
SET(PROJECT_HEADERS "" CACHE INTERNAL "header of project")
SET(PROJECT_QML_FILES "" CACHE INTERNAL "qml project files")
SET(PROJECT_QRC_FILES "" CACHE INTERNAL "qrc project files")
SET(PROJECT_TS_FILES "" CACHE INTERNAL "ts project files")
SET(PROJECT_QM_FILES "" CACHE INTERNAL "qm project files")
SET(UPDATE_TS CACHE BOOL "") # questo lo setto qui cosi poi lo posso modificare da QtCreator

SET(PROJECT_FOLDERS
    "${PROJECT_SOURCE_DIR}/common"
    "${PROJECT_SOURCE_DIR}/device"
    "${PROJECT_SOURCE_DIR}/ui"
    )

FOREACH(item ${PROJECT_FOLDERS})
    MESSAGE("Folder: " ${item})
    INCLUDE_DIRECTORIES(${item})
    ADD_SUBDIRECTORY(${item})
ENDFOREACH(item)

MESSAGE("*** PROJECT_SOURCES: ${PROJECT_SOURCES}")
MESSAGE("*** PROJECT_HEADERS: ${PROJECT_HEADERS}")
MESSAGE("*** PROJECT_QML_FILES: ${PROJECT_QML_FILES}")
MESSAGE("*** PROJECT_QRC_FILES: ${PROJECT_QRC_FILES}")
MESSAGE("*** PROJECT_TS_FILES: ${PROJECT_TS_FILES}")
MESSAGE("*** PROJECT_QM_FILES: ${PROJECT_QM_FILES}")

MESSAGE("LINK_LIBRARIES: ${QT_LIBRARIES} ${CT_XMLAPI_LIBS}")

IF(UPDATE_TS)

    MESSAGE("QT5_CREATE_TRANSLATION")
    FOREACH(TS_ITEM ${PROJECT_TS_FILES})
        QT5_CREATE_TRANSLATION(${PROJECT_SOURCES} ${PROJECT_HEADERS} ${PROJECT_UI_FILES} main.cpp ${TS_ITEM})
    ENDFOREACH(TS_ITEM)

    #SET(PROJECT_QRC_FILES "") # questo serve per evitare problemi di compilazione RCC con CMAKE_AUTORCC ON

ELSE(UPDATE_TS)

    MESSAGE("QT5_ADD_TRANSLATION")
    FOREACH(QM_ITEM ${PROJECT_QM_FILES})
        QT5_ADD_TRANSLATION(${QM_ITEM} ${PROJECT_TS_FILES})
    ENDFOREACH(QM_ITEM)

ENDIF(UPDATE_TS)

if ( MSVC )
    FOREACH( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
        STRING( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
        SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_BINARY_DIR} )
        SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_BINARY_DIR} )
        SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_BINARY_DIR} )
    ENDFOREACH( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
ENDIF ( MSVC )

GET_PROPERTY(INCLUDE_DIRS DIRECTORY PROPERTY INCLUDE_DIRECTORIES)
MESSAGE("INCLUDE_DIRS: ${INCLUDE_DIRS}")

QTQUICK_COMPILER_ADD_RESOURCES(RESOURCES ${PROJECT_QRC_FILES})
ADD_EXECUTABLE(${PROJECT_NAME}-${CUTTER_VERSION} WIN32
    main.cpp
    ${PROJECT_SOURCES}
    ${PROJECT_HEADERS}
    ${PROJECT_QML_FILES}
    ${PROJECT_QM_FILES}
    ${RESOURCES}
    ${PROJECT_TS_FILES}
    )
ADD_DEFINITIONS(
    ${Qt5Core_DEFINITIONS}
    ${Qt5Gui_DEFINITIONS}
    ${Qt5Qml_DEFINITIONS}
    ${Qt5Quick_DEFINITIONS}
    ${Qt5QuickControls2_DEFINITIONS}
    ${Qt5QuickTemplates2_DEFINITIONS}
    ${Qt5Network_DEFINITIONS}
    )

TARGET_LINK_LIBRARIES(${PROJECT_NAME}-${CUTTER_VERSION}
    ${QT_LIBRARIES} ${CT_XMLAPI_LIBS}
    )

IF(MSVC_IDE)
    INSTALL(TARGETS ${PROJECT} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/\${BUILD_TYPE})
ENDIF(MSVC_IDE)

# FOREACH(QM_ITEM ${PROJECT_QM_FILES})
#     ADD_CUSTOM_COMMAND(
#         TARGET ${PROJECT_NAME}-${CUTTER_VERSION}
#         PRE_BUILD
#         COMMAND ${CMAKE_COMMAND} -E copy "${PROJECT_BINARY_DIR}/${QM_ITEM}" "${PROJECT_SOURCE_DIR}/ui/lang/${QM_ITEM}"
#         )
# ENDFOREACH(QM_ITEM)



# DLL DELLA CAMBRIDGE

# OBBLIGATORIE
FOREACH (CT_XML_DLL ${CT_XMLAPI_DLL_MANDATORY})
    SET(CT_XML_DLL "${CT_XMLAPI_DLL_PATH}/${CT_XML_DLL}")
    MESSAGE("DLL Mandatory Cambridge ${CT_XML_DLL}")
    ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME}-${CUTTER_VERSION}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy ${CT_XML_DLL} ${CMAKE_CURRENT_BINARY_DIR}
        )
ENDFOREACH(CT_XML_DLL)

# FACOLTATIVE
FOREACH (CT_XML_LIB ${CT_XMLAPI_LIBS})
    SET(CT_DLL_ITEM "${CT_XMLAPI_DLL_PATH}/${CT_XML_LIB}.dll")
    # emacs regex: Win32\([A-z0-9]\)\{0,\}\.
    STRING(REGEX REPLACE "Win32[A-z0-9]*." "" CT_XML_CORE_DLL ${CT_DLL_ITEM})
    MESSAGE("DLL Cambridge ${CT_DLL_ITEM}")
    MESSAGE("DLL Cambridge ${CT_XML_CORE_DLL}")
    ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME}-${CUTTER_VERSION}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy ${CT_DLL_ITEM} ${CMAKE_CURRENT_BINARY_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${CT_XML_CORE_DLL} ${CMAKE_CURRENT_BINARY_DIR}
        )
ENDFOREACH(CT_XML_LIB)

## OBBLIGATORIE (QT)
#FOREACH (DLL_ITEM ${QT_LIBRARIES})
#    #    IF (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
#    IF (DEBUG_MODE)
#        GET_TARGET_PROPERTY(_loc ${DLL_ITEM} LOCATION_DEBUG)
#    ELSE()
#        GET_TARGET_PROPERTY(_loc ${DLL_ITEM} LOCATION)
#    ENDIF()
#    MESSAGE("Plugin ${DLL_ITEM} is at location ${_loc}")
#    ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME}-${CUTTER_VERSION}
#        POST_BUILD
#        COMMAND ${CMAKE_COMMAND} -E copy ${_loc} ${CMAKE_CURRENT_BINARY_DIR})
#ENDFOREACH(DLL_ITEM)

#MESSAGE("QMAKE_BIN_EXE: ${QT_QMAKE_EXECUTABLE}")
#GET_FILENAME_COMPONENT(QT_QMAKE_PATH "${QT_QMAKE_EXECUTABLE}" DIRECTORY)
#MESSAGE("QMAKE_PATH: ${QT_QMAKE_PATH}")

## OBBLIGATORIE (QT DIPENDENZE)
#SET(QT_LIBRARIES_DEP "libEGL;libGLESv2;d3dcompiler_47;opengl32sw" CACHE STRING "Dipendeze dll QT/QML")
#FOREACH (QT_DLL_DEP_ITEM ${QT_LIBRARIES_DEP})
#    SET(DLL_NAME "${QT_DLL_DEP_ITEM}")
#    IF (DEBUG_MODE)
#        SET(DLL_DEP_PATH "${QT_QMAKE_PATH}/${DLL_NAME}d.dll")
#        IF (NOT EXISTS "${DLL_DEP_PATH}")
#            SET(DLL_DEP_PATH "${QT_QMAKE_PATH}/${DLL_NAME}.dll")
#        ENDIF()
#    ELSE()
#        SET(DLL_DEP_PATH "${QT_QMAKE_PATH}/${DLL_NAME}.dll")
#    ENDIF()

#    MESSAGE("DLL_DEP_PATH: ${DLL_DEP_PATH}")
#    IF (EXISTS "${DLL_DEP_PATH}")
#        ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME}-${CUTTER_VERSION}
#        POST_BUILD
#        COMMAND ${CMAKE_COMMAND} -E copy ${DLL_DEP_PATH} ${CMAKE_CURRENT_BINARY_DIR})
#    ENDIF()
#ENDFOREACH(QT_DLL_DEP_ITEM)

MESSAGE("QMAKE_BIN_EXE: ${QT_QMAKE_EXECUTABLE}")
FIND_PROGRAM(WINDEPLOYQT_EXECUTABLE windeployqt HINTS "${QT_QMAKE_EXECUTABLE}")
GET_TARGET_PROPERTY(QMAKE_EXECUTABLE Qt5::qmake IMPORTED_LOCATION)
GET_FILENAME_COMPONENT(QT_BIN_DIR "${QMAKE_EXECUTABLE}" DIRECTORY)
MESSAGE("WINDEPLOYQT_EXECUTABLE: ${WINDEPLOYQT_EXECUTABLE}")
MESSAGE("QT_BIN_DIR: ${QT_BIN_DIR}")
ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME}-${CUTTER_VERSION} POST_BUILD
    COMMAND "${CMAKE_COMMAND}" -E
        env PATH="${QT_BIN_DIR}" ${WINDEPLOYQT_EXECUTABLE}
            "-qmldir" "${CMAKE_SOURCE_DIR}/ui/qml" "$<TARGET_FILE:${PROJECT_NAME}-${CUTTER_VERSION}>"
    COMMENT "Running windeployqt..."
)
